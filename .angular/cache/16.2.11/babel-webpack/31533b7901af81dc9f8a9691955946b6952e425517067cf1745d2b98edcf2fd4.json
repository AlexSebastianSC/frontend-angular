{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.itemsUrl = \"https://pruebafractal-red-pine-9084.fly.dev\";\n      //private itemsUrl = 'http://localhost:8080';\n      this.itemsSubject = new BehaviorSubject([]);\n      this.items$ = this.itemsSubject.asObservable();\n      this.itemOrderSubject = new BehaviorSubject(null);\n      this.itemOrder$ = this.itemOrderSubject.asObservable();\n      this.orderSubject = new BehaviorSubject(null);\n      this.order$ = this.orderSubject.asObservable();\n      this.selectedProductSubject = new BehaviorSubject(null);\n      this.product$ = this.selectedProductSubject.asObservable();\n      this.createdMode = new BehaviorSubject(null);\n      this.createdMode$ = this.createdMode.asObservable();\n    }\n    //Getting colections of objects through HTTP\n    fetchItems(orderId) {\n      return this.http.get(`${this.itemsUrl}/api/item-orders/${orderId}`).pipe(tap(items => console.log('Items recibidos:', items)));\n    }\n    getItems() {\n      return this.itemsSubject.asObservable();\n    }\n    setCreatedMode(state) {\n      this.createdMode.next(state);\n    }\n    getCreatedMode() {\n      return this.createdMode.value;\n    }\n    //Set collection of objects on service\n    setItems(items) {\n      this.itemsSubject.next(items);\n    }\n    deleteItemOrder(itemOrder) {\n      let currentItems = this.itemsSubject.getValue();\n      currentItems = currentItems.filter(item => item !== itemOrder);\n      this.itemsSubject.next(currentItems);\n      console.log(this.itemsSubject);\n    }\n    // Agregar arreglos de objetos al servicio\n    addItems(items) {\n      const currentItems = this.itemsSubject.value;\n      this.itemsSubject.next([...currentItems, ...items]);\n    }\n    setEditingItem(itemOrder) {\n      this.selectedProductSubject.next(itemOrder);\n    }\n    clearEditingItem() {\n      this.selectedProductSubject.next(null);\n    }\n    getSelectedProduct() {\n      return this.selectedProductSubject.value;\n    }\n    // Agregar un solo objeto al servicio\n    addItem(item) {\n      const currentItems = this.itemsSubject.value;\n      this.itemsSubject.next([...currentItems, item]);\n    }\n    getItemsOrder() {\n      return this.itemsSubject.value;\n    }\n    //Getting object ItemOrder temporal\n    getItemOrder() {\n      return this.itemOrderSubject.value;\n    }\n    //Set object ItemOrder temporal on service\n    setItemOrder(itemOrder) {\n      this.itemOrderSubject.next(itemOrder);\n    }\n    clearItems() {\n      this.itemsSubject.next([]); // You can set it to any initial or empty value\n    }\n    //Getting object ItemOrder temporal\n    getOrder() {\n      return this.orderSubject.value;\n    }\n    //Set object ItemOrder temporal on service\n    setOrder(order) {\n      this.orderSubject.next(order);\n    }\n    static #_ = this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}