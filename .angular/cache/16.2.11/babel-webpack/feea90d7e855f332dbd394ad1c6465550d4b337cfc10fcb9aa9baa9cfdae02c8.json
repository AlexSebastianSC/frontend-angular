{"ast":null,"code":"import { Order } from './order';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OrdersSharedDataService = /*#__PURE__*/(() => {\n  class OrdersSharedDataService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://pruebafractal-red-pine-9084.fly.dev';\n      //private apiUrl = 'http://localhost:8080';\n      this.orders = [];\n      this.order = new Order();\n      this.editingOrderIndex = -1;\n      this.creatingNewOrder = false;\n    }\n    getOrders() {\n      return this.http.get(`${this.apiUrl}/api/orders`);\n    }\n    getOrderDetails(orderId) {\n      console.log(orderId);\n      return this.http.get(`${this.apiUrl}/api/item-orders/${orderId}`);\n    }\n    deleteOrder(numOrder) {\n      this.http.delete(`${this.apiUrl}/api/orders/delete/${numOrder}`).subscribe(response => {\n        console.log('Respuesta exitosa:', response);\n      }, error => {\n        if (error instanceof HttpErrorResponse) {\n          console.error('Status:', error.status);\n          console.error('Body:', error.error);\n          console.error('Error en la solicitud:', error);\n        }\n      });\n    }\n    deleteItemsOrder(numOrder) {\n      this.http.delete(`${this.apiUrl}/api/item-orders/delete/${numOrder}`).subscribe(response => {\n        console.log('Respuesta exitosa:', response);\n      }, error => {\n        if (error instanceof HttpErrorResponse) {\n          console.error('Status:', error.status);\n          console.error('Body:', error.error);\n          console.error('Error en la solicitud:', error);\n        }\n      });\n    }\n    putOrder(body) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      console.log(body);\n      this.http.put(`${this.apiUrl}/api/orders/save`, body, httpOptions).subscribe(response => {\n        // Manejar la respuesta exitosa aquí\n        console.log('Respuesta exitosa:', response);\n      }, error => {\n        // Manejar el error aquí\n        if (error instanceof HttpErrorResponse) {\n          console.error('Status:', error.status);\n          console.error('Body:', error.error);\n          console.error('Error en la solicitud:', error);\n        }\n      });\n    }\n    updateOrder(body) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      console.log(body);\n      this.http.put(`${this.apiUrl}/api/orders/update`, body, httpOptions).subscribe(response => {\n        // Manejar la respuesta exitosa aquí\n        console.log('Respuesta exitosa:', response);\n      }, error => {\n        // Manejar el error aquí\n        if (error instanceof HttpErrorResponse) {\n          console.error('Status:', error.status);\n          console.error('Body:', error.error);\n          console.error('Error en la solicitud:', error);\n        }\n      });\n    }\n    updateItemsOrder(body) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      console.log(body);\n      this.http.put(`${this.apiUrl}/api/item-orders/update`, body, httpOptions).subscribe(response => {\n        console.log('Respuesta exitosa:', response);\n      }, error => {\n        if (error instanceof HttpErrorResponse) {\n          console.error('Status:', error.status);\n          console.error('Body:', error.error);\n          console.error('Error en la solicitud:', error);\n        }\n      });\n    }\n    // Nuevo método para establecer el item y el índice de edición\n    setEditingOrder(order, index) {\n      this.editingOrder = {\n        order,\n        index\n      };\n    }\n    getEditingOrder() {\n      return this.editingOrder.order;\n    }\n    clearEditingItem() {\n      this.editingOrder = null;\n      this.editingOrderIndex = -1;\n    }\n    getAllProducts() {\n      return this.http.get(this.apiUrl);\n    }\n    setCreatingNewOrder(value) {\n      this.creatingNewOrder = value;\n    }\n    isCreatingNewOrder() {\n      return this.creatingNewOrder;\n    }\n    static #_ = this.ɵfac = function OrdersSharedDataService_Factory(t) {\n      return new (t || OrdersSharedDataService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrdersSharedDataService,\n      factory: OrdersSharedDataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return OrdersSharedDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}