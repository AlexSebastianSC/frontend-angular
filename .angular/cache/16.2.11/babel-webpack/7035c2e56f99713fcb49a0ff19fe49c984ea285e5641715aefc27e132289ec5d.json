{"ast":null,"code":"import { Order } from '../orders/order';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../orders/orders-shared-data.service\";\nfunction FormComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Order N: \", ctx_r0.orderNumber, \"\");\n  }\n}\nfunction FormComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Date : \", ctx_r1.orderDate, \"\");\n  }\n}\nfunction FormComponent_tr_30_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵelement(2, \"span\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 19);\n    i0.ɵɵtext(4, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FormComponent_tr_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 14);\n    i0.ɵɵtemplate(2, FormComponent_tr_30_div_2_Template, 5, 0, \"div\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loading);\n  }\n}\nfunction FormComponent_tr_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 8);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 8);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 8);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 8);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 8);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\", 8)(12, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function FormComponent_tr_32_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const itemOrder_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.editItemOrder(itemOrder_r5));\n    });\n    i0.ɵɵtext(13, \"edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"td\")(15, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function FormComponent_tr_32_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const itemOrder_r5 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.deleteItemOrder(itemOrder_r5));\n    });\n    i0.ɵɵtext(16, \"delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const itemOrder_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemOrder_r5.id.productId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemOrder_r5.productName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemOrder_r5.productUnitPrice);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemOrder_r5.quantity);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemOrder_r5.productTotalPrice);\n  }\n}\nconst _c0 = function () {\n  return [\"/orders/my-orders\"];\n};\nexport let FormComponent = /*#__PURE__*/(() => {\n  class FormComponent {\n    //itemOrders: any;\n    constructor(dataService, location, router, datePipe, sharedDataService, route, orderSharedDataService) {\n      this.dataService = dataService;\n      this.location = location;\n      this.router = router;\n      this.datePipe = datePipe;\n      this.sharedDataService = sharedDataService;\n      this.route = route;\n      this.orderSharedDataService = orderSharedDataService;\n      this.items = [];\n      this.loading = true;\n      this.itemsUpdate = [];\n      //orderId: number;\n      this.isCreatingNewOrder = false;\n      this.showSuccessAlert = false;\n      this.itemOrders = [];\n      this.order = new Order();\n      this.titulo = \"New order\";\n      this.isEditing = false;\n    }\n    ngOnInit() {\n      if (this.orderSharedDataService.isCreatingNewOrder()) {\n        this.initializeForm();\n        //this.isEditing=false;\n      } else {\n        //this.isCreatingNewOrder= false;\n        /*this.dataService.fetchItems(this.dataService.getOrder().orderId).subscribe(items => {\n          this.dataService.addItems(items);\n        });*/\n        //console.log(\"this.getItems\",this.dataService.getItemsOrder());\n        this.orderSharedDataService.setCreatingNewOrder(false);\n        this.isEditing = true;\n        //console.log(this.dataService.getOrder())\n        //console.log(\"this.Order\",this.dataService.getOrder());\n        const itemsOrderList = this.dataService.getItemsOrder();\n        const order = this.dataService.getOrder() || new Order();\n        //this.totalQuantity = this.calculateTotalQuantity(); //this.dataService.getOrder().numProducts;\n        this.orderDate = this.dataService.getOrder().orderDate;\n        this.orderNumber = this.dataService.getOrder().orderId;\n        this.itemsUpdate = itemsOrderList;\n        this.actualQuantity = this.calculateTotalQuantity();\n        this.actualFinalPrice = this.calculateTotalPrice();\n        console.log(\"order: \", order);\n        itemsOrderList.forEach(itemOrder => {\n          console.log(itemOrder);\n        });\n        this.loading = false;\n        console.log(\"productos que ya estan: \", this.itemsUpdate);\n      }\n    }\n    get itemsOrderList() {\n      this.dataService.setCreatedMode(true);\n      return this.dataService.getItemsOrder();\n    }\n    // Method to handle events on forms\n    handleFormEvent(itemOrder) {\n      this.dataService.setItemOrder(itemOrder);\n    }\n    addProductsEditing(isEditing) {\n      console.log(\"Estado: \", isEditing);\n      if (isEditing) {\n        console.log(\"orderid: ...\", this.dataService.getOrder().orderId);\n        this.router.navigate(['/addedit/formproducts/', this.dataService.getOrder().orderId, 'newProduct']);\n      } else {\n        this.router.navigate(['/addedit/formproducts/create/newProduct']);\n      }\n    }\n    deleteItemOrder(itemOrder) {\n      this.dataService.deleteItemOrder(itemOrder);\n      this.itemsUpdate = this.dataService.getItemsOrder();\n      console.log(\"this.dataService.getItemsOrder()\", this.itemsUpdate);\n    }\n    cancelOrder() {\n      this.dataService.clearItems();\n      this.location.back();\n    }\n    calculateTotalQuantity() {\n      return this.dataService.getItemsOrder().reduce((total, itemOrder) => total + itemOrder.quantity, 0);\n    }\n    calculateTotalPrice() {\n      return parseFloat(this.dataService.getItemsOrder().reduce((total, itemOrder) => total + itemOrder.productTotalPrice, 0).toFixed(2));\n      //return 10;\n    }\n\n    addOrder() {\n      if (this.dataService.getItemsOrder().length > 0 && this.orderSharedDataService.isCreatingNewOrder()) {\n        const body = this.generateOrderBody();\n        this.orderSharedDataService.putOrder(body);\n        this.orderSharedDataService.setCreatingNewOrder(false);\n      } else if (this.dataService.getItemsOrder().length === 0) {\n        alert('No hay productos en la orden');\n      }\n      if (!this.orderSharedDataService.isCreatingNewOrder() && this.itemsUpdate.length !== 0) {\n        const bodyOrderUpdate = this.generateOrderUpdateBody();\n        const bodyItemOrderUpdate = this.generateItemsOrderUpdateBody();\n        this.orderSharedDataService.updateOrder(bodyOrderUpdate);\n        this.orderSharedDataService.updateItemsOrder(bodyItemOrderUpdate);\n      } else if (this.itemsUpdate.length === 0) {\n        alert('No hay cambios.');\n      }\n      this.orderSharedDataService.setCreatingNewOrder(false);\n      this.router.navigate([\"/orders/my-orders\"]);\n      //window.location.reload();\n      /*\n      if (this.dataService.getItemsOrder().length > 0 && this.itemsUpdate.length!==0) {\n        const body = this.generateOrderBody();\n        if(!this.orderSharedDataService.isCreatingNewOrder()){\n          const bodyOrderUpdate = this.generateOrderUpdateBody();\n          const bodyItemOrderUpdate = this.generateItemsOrderUpdateBody();\n          this.orderSharedDataService.updateOrder(bodyOrderUpdate);\n          this.orderSharedDataService.updateItemsOrder(bodyItemOrderUpdate);\n        }else{\n        this.orderSharedDataService.putOrder(body);\n      }\n       \n             this.router.navigate([\"/orders/my-orders\"]);\n        //window.location.reload();\n           } else {\n        alert('No hay productos en la orden o no hay cambios.')\n      }\n           this.orderSharedDataService.setCreatingNewOrder(false);\n        */\n    }\n\n    initializeForm() {\n      this.order = new Order();\n      this.itemOrders = [];\n    }\n    editItemOrder(itemOrder) {\n      this.dataService.setEditingItem(itemOrder);\n      this.router.navigate(['addedit/formproducts/updateProduct/', itemOrder.id.orderId, itemOrder.id.productId]);\n    }\n    loadOrderDetails(orderId) {\n      this.orderSharedDataService.getOrderDetails(orderId).subscribe(data => {\n        //this.order = data.order;\n        console.log(data);\n        this.itemOrders = data;\n        //console.log(this.itemOrders);\n      });\n    }\n\n    generateOrderUpdateBody() {\n      const quantity = parseFloat(this.itemsUpdate.reduce((total, item) => total + item.quantity, 0).toFixed(2));\n      const finalPrice = parseFloat(this.itemsUpdate.reduce((total, item) => total + item.productTotalPrice, 0).toFixed(2));\n      const bodyOrderUpdate = {\n        orderId: this.dataService.getOrder().orderId,\n        orderDate: this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n        numProducts: quantity,\n        finalPrice: finalPrice //this.calculateTotalPrice(),// this.actualFinalPrice, //update error\n      };\n\n      console.log(\"bodyOrderUpdate\", bodyOrderUpdate);\n      return bodyOrderUpdate;\n    }\n    generateItemsOrderUpdateBody() {\n      //this.itemsUpdate = this.itemsOrderList;\n      console.log(\"Update item body: \", this.itemsUpdate);\n      //const dtoBodyItemOrder = this.dataService.getItemsOrder().map((item: ItemOrder) => ({\n      const dtoBodyItemOrder = this.itemsUpdate.map(item => ({\n        id: {\n          orderId: this.dataService.getOrder().orderId,\n          productId: item.id.productId\n        },\n        productName: item.productName,\n        productUnitPrice: item.productUnitPrice,\n        quantity: item.quantity,\n        productTotalPrice: item.productTotalPrice\n      }));\n      console.log(\"dtoBodyItemOrder\", dtoBodyItemOrder);\n      return dtoBodyItemOrder;\n    }\n    generateOrderBody() {\n      // Obtener la información necesaria del DataService\n      const items = this.dataService.getItemsOrder();\n      const bodyOrder = {\n        orderDate: this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n        numProducts: this.calculateTotalQuantity(),\n        finalPrice: this.calculateTotalPrice()\n      };\n      // Crear el arreglo de ítems del pedido\n      const dtoBodyItemOrder = items.map(item => ({\n        productId: item.id.productId,\n        productName: item.productName,\n        productUnitPrice: item.productUnitPrice,\n        quantity: item.quantity,\n        productTotalPrice: item.productTotalPrice\n      }));\n      const aux = {\n        bodyOrder,\n        dtoBodyItemOrder\n      };\n      // Devolver el cuerpo completo\n      console.log(aux);\n      this.dataService.clearItems();\n      //this.dataService\n      return aux;\n    }\n    static #_ = this.ɵfac = function FormComponent_Factory(t) {\n      return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Location), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i2.DatePipe), i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.OrdersSharedDataService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FormComponent,\n      selectors: [[\"app-form\"]],\n      decls: 38,\n      vars: 10,\n      consts: [[1, \"card\", \"border-primary\", \"mb-3\"], [1, \"card-header\"], [1, \"card-body\", \"text-primary\", \"bg-black\", \"text-white\"], [1, \"card-title\"], [2, \"margin-bottom\", \"20px\", \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngIf\"], [1, \"table\", \"table-bordered\", \"table-stripped\"], [2, \"text-align\", \"center\"], [\"colspan\", \"2\", 2, \"text-align\", \"center\"], [4, \"ngFor\", \"ngForOf\"], [2, \"margin-top\", \"20px\", \"text-align\", \"right\", \"bottom\", \"20px\", \"right\", \"20px\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 2, \"margin-left\", \"10px\", 3, \"routerLink\", \"click\"], [\"colspan\", \"6\", 1, \"text-center\"], [\"class\", \"text-center mt-3\", 4, \"ngIf\"], [1, \"text-center\", \"mt-3\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-secondary\"], [1, \"sr-only\"], [1, \"mt-2\"], [\"type\", \"button\", \"name\", \"editar\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", \"name\", \"eliminar\", 1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"]],\n      template: function FormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"h5\", 3);\n          i0.ɵɵtext(5, \"Choose your new Orders\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function FormComponent_Template_button_click_7_listener() {\n            return ctx.addProductsEditing(ctx.isEditing);\n          });\n          i0.ɵɵtext(8, \"Add New Product\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(9, FormComponent_span_9_Template, 2, 1, \"span\", 6);\n          i0.ɵɵtemplate(10, FormComponent_span_10_Template, 2, 1, \"span\", 6);\n          i0.ɵɵelementStart(11, \"span\");\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"span\");\n          i0.ɵɵtext(14);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"table\", 7)(16, \"thead\")(17, \"tr\")(18, \"th\", 8);\n          i0.ɵɵtext(19, \"ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"th\", 8);\n          i0.ɵɵtext(21, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"th\", 8);\n          i0.ɵɵtext(23, \"Unit Price\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"th\", 8);\n          i0.ɵɵtext(25, \"Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"th\", 8);\n          i0.ɵɵtext(27, \"Total Price\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"th\", 9);\n          i0.ɵɵtext(29, \" Options \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(30, FormComponent_tr_30_Template, 3, 1, \"tr\", 6);\n          i0.ɵɵelementStart(31, \"tbody\");\n          i0.ɵɵtemplate(32, FormComponent_tr_32_Template, 17, 5, \"tr\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(33, \"div\", 11)(34, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function FormComponent_Template_button_click_34_listener() {\n            return ctx.addOrder();\n          });\n          i0.ɵɵtext(35);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function FormComponent_Template_button_click_36_listener() {\n            return ctx.cancelOrder();\n          });\n          i0.ɵɵtext(37, \"Cancel\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.isEditing ? \"Update Order\" : \"New Order\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.isEditing);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isEditing);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"Products : \", ctx.calculateTotalQuantity(), \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"Final Price : \", ctx.calculateTotalPrice(), \"\");\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.isCreatingNewOrder);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.itemsOrderList);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.isEditing ? \"Update\" : \"Create\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(9, _c0));\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i3.RouterLink],\n      encapsulation: 2\n    });\n  }\n  return FormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}