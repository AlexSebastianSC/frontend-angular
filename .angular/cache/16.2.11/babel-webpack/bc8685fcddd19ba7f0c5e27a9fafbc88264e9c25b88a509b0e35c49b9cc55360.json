{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./product.service\";\nimport * as i3 from \"./data-service.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction FormproductsComponent_ng_container_4_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", product_r4.productId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(product_r4.productName);\n  }\n}\nfunction FormproductsComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"select\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function FormproductsComponent_ng_container_4_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.selectedProductId = $event);\n    })(\"change\", function FormproductsComponent_ng_container_4_Template_select_change_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onChangeProduct());\n    });\n    i0.ɵɵelementStart(2, \"option\", 15);\n    i0.ɵɵtext(3, \"Select a product\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, FormproductsComponent_ng_container_4_option_4_Template, 2, 2, \"option\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"label\", 17);\n    i0.ɵɵtext(6, \"Choose the product\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedProductId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isEditing);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.availableProducts);\n  }\n}\nfunction FormproductsComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.selectedProduct ? ctx_r2.selectedProduct.productName : \"N/A\");\n  }\n}\nexport let FormproductsComponent = /*#__PURE__*/(() => {\n  class FormproductsComponent {\n    constructor(router, productService, dataService, route, location) {\n      this.router = router;\n      this.productService = productService;\n      this.dataService = dataService;\n      this.route = route;\n      this.location = location;\n      this.quantity = 1;\n      this.products = [];\n      this.itemOrders = [];\n      this.availableProducts = [];\n      this.isEditing = false;\n    }\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        const productId = +params['productId'];\n        if (productId) {\n          this.isEditing = true;\n          this.loadSelectedProduct(productId);\n        } else {\n          this.productService.getProductos().subscribe(data => {\n            this.products = data;\n            this.updateAvailableProducts();\n          });\n        }\n      });\n    }\n    onCancelButtonClick() {\n      this.location.back();\n    }\n    loadSelectedProduct(productId) {\n      const editedProduct = this.dataService.getSelectedProduct(); //sharedDataService.getEditingItem();\n      console.log(editedProduct);\n      if (editedProduct) {\n        console.log(editedProduct.productUnitPrice);\n        this.selectedProduct = {\n          productId: editedProduct.id.productId,\n          productName: editedProduct.productName,\n          productPrice: editedProduct.productUnitPrice\n        };\n        this.quantity = editedProduct.quantity;\n      }\n      this.selectedProductId = this.selectedProduct.productId;\n      this.selectedProductPrice = this.selectedProduct.productPrice;\n      console.log(this.selectedProductId);\n      console.log(this.selectedProductPrice);\n      // Desactiva la opción de cambio en el select\n      //this.isEditing = true;\n      /*\n      if (this.products.length === 0) {\n        this.productService.getProductos().subscribe(products => {\n          this.products = products;\n          this.loadSelectedProduct(productId);\n        });\n      } else {\n        // La lista de productos ya está cargada, busca el producto seleccionado.\n        const selectedProductIndex = this.products.findIndex(product => product.productId === productId);\n             if (selectedProductIndex !== -1) {\n          this.selectedProduct = this.products[selectedProductIndex];\n          this.selectedProductId = this.selectedProduct.productId;\n          this.selectedProductPrice = this.selectedProduct ? this.selectedProduct.productPrice : null;\n          this.quantity = this.itemOrders.find(itemOrder => itemOrder.id.productId === productId)?.quantity || 1;\n        } else {\n          console.error(`Product with id ${productId} not found.`);\n        }\n      }\n      */\n    }\n\n    onChangeProduct() {\n      if (this.selectedProductId !== null && this.selectedProductId !== undefined) {\n        this.selectedProduct = this.products.find(product => product.productId === Number(this.selectedProductId));\n        this.selectedProductPrice = this.selectedProduct ? this.selectedProduct.productPrice : null;\n      }\n    }\n    calculateTotalPrice() {\n      const totalPrice = +(this.selectedProductPrice * this.quantity).toFixed(2);\n      if (totalPrice) {\n        return totalPrice;\n      } else {\n        return 0;\n      }\n    }\n    onOKButtonClick() {\n      if (this.selectedProduct) {\n        if (!this.dataService.getCreatedMode()) {\n          const newItemOrder = {\n            id: {\n              orderId: this.dataService.getOrder().orderId,\n              productId: this.selectedProduct.productId\n            },\n            productName: this.selectedProduct.productName,\n            productUnitPrice: this.selectedProduct.productPrice,\n            quantity: this.quantity,\n            productTotalPrice: this.calculateTotalPrice()\n          };\n          console.log(\"new itemOrder: \", newItemOrder);\n        } else {\n          const provisionalOrderId = -1;\n          // Agrega los ítems con el orderId provisional\n          const newItemOrder = {\n            id: {\n              orderId: provisionalOrderId,\n              productId: this.selectedProduct.productId\n            },\n            productName: this.selectedProduct.productName,\n            productUnitPrice: this.selectedProduct.productPrice,\n            quantity: this.quantity,\n            productTotalPrice: this.calculateTotalPrice()\n          };\n          // Obtén la lista actual de ítems del servicio\n          const currentItems = this.dataService.getItemsOrder();\n          // Busca el ítem existente en la lista por productId\n          const existingItemIndex = currentItems.findIndex(item => item.id.productId === newItemOrder.id.productId);\n          if (existingItemIndex !== -1) {\n            // Si el ítem ya existe, actualiza su valor en la lista\n            currentItems[existingItemIndex] = newItemOrder;\n          } else {\n            // Si el ítem no existe, agrégalo a la lista\n            currentItems.push(newItemOrder);\n          }\n          // Actualiza la lista de ítems en el servicio\n          this.dataService.setItems(currentItems);\n          // Limpia el ítem de edición\n          this.dataService.clearEditingItem();\n          // Navega hacia atrás\n          this.location.back();\n        }\n      }\n    }\n    updateAvailableProducts() {\n      console.log('All Products:', this.products);\n      //console.log('Item Orders:', this.itemOrders);\n      const allProducts = this.products;\n      const selectedProductIds = this.dataService.getItemsOrder().map(itemOrder => itemOrder.id.productId);\n      console.log(\"Ids presentes: \", selectedProductIds);\n      this.availableProducts = allProducts.filter(product => !selectedProductIds.includes(product.productId));\n      console.log(\"Ids dispoonibles: \", this.availableProducts);\n    }\n    static #_ = this.ɵfac = function FormproductsComponent_Factory(t) {\n      return new (t || FormproductsComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.DataService), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Location));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FormproductsComponent,\n      selectors: [[\"app-formproducts\"]],\n      decls: 25,\n      vars: 6,\n      consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\", \"mt-5\"], [1, \"col-md-6\"], [1, \"form-floating\"], [4, \"ngIf\", \"ngIfElse\"], [\"staticProductName\", \"\"], [\"for\", \"quantity\", 1, \"me-2\"], [1, \"form-floating\", \"mt-2\", \"d-flex\", \"align-items-center\"], [\"type\", \"number\", \"id\", \"quantity\", \"name\", \"quantity\", \"min\", \"1\", 1, \"flex-grow-1\", 3, \"ngModel\", \"ngModelChange\"], [1, \"row\", \"justify-content-center\", \"mt-3\"], [1, \"col-md\"], [1, \"d-flex\", \"justify-content-center\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"btn-sm\", \"mx-2\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", \"mx-2\", 3, \"click\"], [1, \"form-select\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"value\", \"\", 3, \"disabled\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"floatingSelectGrid\"], [3, \"value\"]],\n      template: function FormproductsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n          i0.ɵɵtemplate(4, FormproductsComponent_ng_container_4_Template, 7, 3, \"ng-container\", 4);\n          i0.ɵɵtemplate(5, FormproductsComponent_ng_template_5_Template, 2, 1, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"br\");\n          i0.ɵɵelementStart(8, \"div\");\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"br\");\n          i0.ɵɵelementStart(11, \"label\", 6);\n          i0.ɵɵtext(12, \"Choose quantity:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 7)(14, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function FormproductsComponent_Template_input_ngModelChange_14_listener($event) {\n            return ctx.quantity = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(15, \"br\");\n          i0.ɵɵelementStart(16, \"div\");\n          i0.ɵɵtext(17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"div\", 9)(19, \"div\", 10)(20, \"div\", 11)(21, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function FormproductsComponent_Template_button_click_21_listener() {\n            return ctx.onOKButtonClick();\n          });\n          i0.ɵɵtext(22);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function FormproductsComponent_Template_button_click_23_listener() {\n            return ctx.onCancelButtonClick();\n          });\n          i0.ɵɵtext(24, \"Cancel\");\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(6);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isEditing)(\"ngIfElse\", _r1);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" Product price: \", ctx.selectedProductPrice != null ? ctx.selectedProductPrice : \"\", \" \");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.quantity);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" Final Price: \", ctx.calculateTotalPrice(), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.isEditing ? \"Update\" : \"OK\");\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.MinValidator, i5.NgModel],\n      encapsulation: 2\n    });\n  }\n  return FormproductsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}